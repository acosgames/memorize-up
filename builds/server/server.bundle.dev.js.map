{"version":3,"sources":["file:///E:\\GitHub\\acos-games\\memorize-up\\game-server\\acosg.js","file:///E:\\GitHub\\acos-games\\memorize-up\\game-server\\game.js","file:///webpack/bootstrap","file:///webpack/runtime/define property getters","file:///webpack/runtime/hasOwnProperty shorthand","file:///E:\\GitHub\\acos-games\\memorize-up\\game-server\\index.js"],"names":[],"mappings":";;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sCAAsC;AACzD;AACA;AACA;AACA,mBAAmB,2CAA2C;AAC9D;AACA;AACA;AACA,mBAAmB,uCAAuC;;;AAG1D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,WAAW,E;;;;;;;;;;;;;;ACrOA;;AAE1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe;AACf,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA,QAAQ,mDAAW;AACnB;AACA;;AAEA;AACA,mBAAmB,gDAAQ;AAC3B;AACA;;AAEA,sBAAsB,sDAAc;;AAEpC;AACA;;AAEA;AACA,QAAQ,+CAAO;AACf;AACA;;AAEA;;AAEA,qBAAqB,mDAAW;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,iDAAS;AAC7B;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,oBAAoB,iDAAS;;AAE7B;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,kDAAU;AAC1B,iDAAiD;AACjD;;AAEA;AACA,oBAAoB,iDAAS;AAC7B;;AAEA;;AAEA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,iDAAS;;;AAG7B;;AAEA,QAAQ,gDAAQ;;AAEhB,gD;AACA;;AAEA;AACA,QAAQ,wDAAgB;AACxB;;AAEA;AACA;AACA,oBAAoB,iDAAS;AAC7B,qBAAqB,mDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAQ,oDAAY;AACpB;AACA;AACA,SAAS;AACT,sBAAsB;AACtB;AACA;;AAEA,iEAAe,gBAAgB,E;;;;;;UCxJ/B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;;;;;;;;ACA0B;AACK;;;AAG/B,8CAAM,0BAA0B,oDAAmB;AACnD,8CAAM,qBAAqB,iDAAgB;AAC3C,8CAAM,qBAAqB,iDAAgB;AAC3C,8CAAM,sBAAsB,kDAAiB;AAC7C,8CAAM,qBAAqB,iDAAgB;;AAE3C,kDAAU,G","file":"server.bundle.dev.js","sourcesContent":["\r\nclass ACOSG {\r\n    constructor() {\r\n        try {\r\n            this.actions = globals.actions();\r\n        }\r\n        catch (e) { this.error('Failed to load actions'); return }\r\n        try {\r\n            this.originalGame = globals.game();\r\n        }\r\n        catch (e) { this.error('Failed to load originalGame'); return }\r\n        try {\r\n            this.nextGame = globals.game();\r\n        }\r\n        catch (e) { this.error('Failed to load nextGame'); return }\r\n\r\n\r\n        this.currentAction = null;\r\n\r\n        this.isNewGame = false;\r\n        // this.markedForDelete = false;\r\n        this.defaultSeconds = 15;\r\n        // this.nextTimeLimit = -1;\r\n        this.kickedPlayers = [];\r\n\r\n        this.randomFunc = null;\r\n        // if (!this.nextGame || !this.nextGame.rules || Object.keys(this.nextGame.rules).length == 0) {\r\n        //     this.isNewGame = true;\r\n        //     this.error('Missing Rules');\r\n        // }\r\n\r\n        if (this.nextGame) {\r\n            if (!('timer' in this.nextGame)) {\r\n                this.nextGame.timer = {};\r\n            }\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            this.nextGame.events = {};\r\n        }\r\n    }\r\n\r\n    on(type, cb) {\r\n\r\n        // if (type == 'newgame') {\r\n        //     //if (this.isNewGame) {\r\n        //     this.currentAction = this.actions[0];\r\n        //     if (this.currentAction.type == '')\r\n        //         cb(this.actions[0]);\r\n        //     this.isNewGame = false;\r\n        //     //}\r\n\r\n        //     return;\r\n        // }\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            if (this.actions[i].type == type) {\r\n                this.currentAction = this.actions[i];\r\n                let result = cb(this.currentAction);\r\n                if (typeof result == \"boolean\" && !result) {\r\n                    this.ignore();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ignore() {\r\n        globals.ignore();\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = player;\r\n        }\r\n        if (!this.nextGame)\r\n            this.nextGame = {};\r\n\r\n        for (const key in game) {\r\n            if (key == 'room')\r\n                continue;\r\n            this.nextGame[key] = game[key];\r\n        }\r\n        // this.nextGame = game;\r\n    }\r\n\r\n    submit() {\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    gameover(payload) {\r\n        this.event('gameover', payload);\r\n    }\r\n\r\n    log() {\r\n        // globals.log.apply(globals, arguments);\r\n        globals.log(arguments)\r\n        // globals.log(msg);\r\n    }\r\n    error() {\r\n        // globals.error.apply(globals, arguments);\r\n        globals.error(arguments);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    database() {\r\n        return globals.database();\r\n    }\r\n\r\n    action() {\r\n        return this.currentAction;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'undefined' || obj == null) {\r\n            return this.nextGame.next;\r\n        }\r\n\r\n        if (typeof obj === 'object' && !Array.isArray(obj)) {\r\n            this.nextGame.next = obj;\r\n        }\r\n\r\n        this.nextGame.next = { id: obj };\r\n    }\r\n\r\n    setTimelimit(seconds) {\r\n        seconds = seconds || this.defaultSeconds;\r\n        if (!this.nextGame.timer)\r\n            this.nextGame.timer = {};\r\n        this.nextGame.timer.set = Math.min(60, Math.max(10, seconds));\r\n    }\r\n\r\n    reachedTimelimit(action) {\r\n        if (typeof action.timeleft == 'undefined')\r\n            return false;\r\n        return action.timeleft <= 0;\r\n    }\r\n\r\n    event(name, payload) {\r\n        if (!payload)\r\n            return this.nextGame.events[name];\r\n\r\n        this.nextGame.events[name] = payload || {};\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = {};\r\n    }\r\n\r\n    //discrete random using room data, initialized before server script is run\r\n    random() {\r\n        return globals.random();\r\n    }\r\n\r\n    // events(name) {\r\n    //     if (typeof name === 'undefined')\r\n    //         return this.nextGame.events;\r\n    //     this.nextGame.events.push(name);\r\n    // }\r\n}\r\n\r\nexport default new ACOSG();","import cup from './acosg';\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        history: [],\r\n        round: 3,\r\n        //pattern: [],\r\n    },\r\n    players: {},\r\n    next: {},\r\n    events: {}\r\n}\r\n\r\nclass MemorizeUp {\r\n\r\n    onNewGame(action) {\r\n        cup.setGame(defaultGame);\r\n        this.checkNewRound();\r\n    }\r\n\r\n    onSkip(action) {\r\n        let next = cup.next();\r\n        if (!next || !next.id)\r\n            return;\r\n\r\n        let players = cup.playerList();\r\n\r\n        this.playerLeave(players[0]);\r\n    }\r\n\r\n    onJoin(action) {\r\n        cup.log(action);\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        // action.test.hello = 1;\r\n\r\n        let player = cup.players(action.user.id);\r\n        player.score = 0;\r\n    }\r\n\r\n    checkNewRound() {\r\n        //if player count reached required limit, start the game\r\n        //let maxPlayers = cup.rules('maxPlayers') || 2;\r\n        this.newRound();\r\n    }\r\n\r\n    onLeave(action) {\r\n        this.playerLeave(action.user.id);\r\n    }\r\n\r\n    playerLeave(userid) {\r\n        this.setWinner(userid)\r\n    }\r\n\r\n    onPick(action) {\r\n\r\n        let maxCorrect = this.checkGameover(action)\r\n\r\n        if (maxCorrect > -1) {\r\n            this.setWinner(action.user.id, maxCorrect);\r\n            return;\r\n        }\r\n\r\n        // let player = cup.players(action.user.id);\r\n\r\n        // let input = action?.payload;\r\n        // if (!input || !Array.isArray(input) || input.length == 0)\r\n        //     player.score = 0;\r\n        // else\r\n        //     player.score = input.length;\r\n\r\n        let state = cup.state();\r\n        state.round = state.round + 1;\r\n        this.newRound();\r\n    }\r\n\r\n\r\n    checkGameover(action) {\r\n        let input = action?.payload;\r\n        if (!input || !Array.isArray(input) || input.length == 0)\r\n            return 0;\r\n\r\n        let state = cup.state();\r\n\r\n        if (input.length < state.history.length)\r\n            return input.length;\r\n        // let inputPattern = this.decodePattern(input);\r\n        for (var i = 0; i < input.length; i++) {\r\n            if (input[i] != state.history[i])\r\n                return i + 1;\r\n        }\r\n\r\n\r\n        return -1;\r\n    }\r\n\r\n    getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        let r = cup.random();\r\n        return Math.floor(r * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n    }\r\n\r\n    addPatterns() {\r\n        let state = cup.state();\r\n        //state.pattern = [];\r\n\r\n        let count = state.round == 3 ? 3 : 1;\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            let nextPattern = this.getRandomInt(1, 5);\r\n            state.history.push(nextPattern);\r\n            // state.pattern.push(nextPattern);\r\n        }\r\n    }\r\n\r\n    newRound() {\r\n        let state = cup.state();\r\n\r\n\r\n        this.addPatterns();\r\n\r\n        cup.next('*');\r\n\r\n        // state.pattern = this.encodePattern();   \r\n        // cup.event('pattern', this.encodePattern());\r\n\r\n        let minTime = Math.max(state.history.length, 5) + Math.round(state.history.length * 0.8) * 100;\r\n        cup.setTimelimit(minTime);\r\n    }\r\n\r\n    // set the winner event and data\r\n    setWinner(userid, maxCorrect) {\r\n        let state = cup.state();\r\n        let player = cup.players(userid);\r\n        if (!player) {\r\n            player = {};\r\n            player.id = 'unknown player';\r\n        }\r\n        player.rank = 1;\r\n        player.score = state.round;\r\n\r\n\r\n        cup.gameover({\r\n            type: 'winner',\r\n            correct: maxCorrect\r\n        });\r\n        // cup.next({});\r\n    }\r\n}\r\n\r\nexport default new MemorizeUp();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import cup from './acosg';\r\nimport tictactoe from './game';\r\n\r\n\r\ncup.on('gamestart', (action) => tictactoe.onNewGame(action));\r\ncup.on('skip', (action) => tictactoe.onSkip(action));\r\ncup.on('join', (action) => tictactoe.onJoin(action));\r\ncup.on('leave', (action) => tictactoe.onLeave(action));\r\ncup.on('pick', (action) => tictactoe.onPick(action));\r\n\r\ncup.submit();"],"sourceRoot":""}